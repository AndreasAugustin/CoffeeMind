// Generated by CoffeeScript 1.8.0
(function() {
  var App;

  App = typeof exports !== "undefined" && exports !== null ? exports : window;

  App.coffeeMind = App.coffeeMind || {};

  App.coffeeMind.board = (function() {
    var allowMultipleColor, availableColoursCount, baseScore, changeColor, checkColors, checkGuessedColors, colors, cols, createBoard, currentRow, getColor, getSolution, guessColors, init, nextColor, numColors, previousColor, print, randomColor, reset, rowHasDifferentColors, rows, setColors, _options;
    _options = {};
    cols = 0;
    rows = 0;
    baseScore = 0;
    numColors = 0;
    allowMultipleColor = false;
    colors = [];
    guessColors = [];
    availableColoursCount = 0;
    currentRow = 0;
    init = function(callback) {
      _options = App.settings;
      rows = _options.rows;
      cols = _options.cols;
      availableColoursCount = _options.availableColours;
      baseScore = _options.baseScore;
      numColors = _options.numColors;
      allowMultipleColor = _options.allowMultipleColors;
      currentRow = rows - 1;
      setColors();
      createBoard();
      callback();
      return null;
    };
    reset = function(callback) {
      init(callback);
      return null;
    };
    setColors = function() {
      var type, x, _i;
      for (x = _i = 0; 0 <= cols ? _i < cols : _i > cols; x = 0 <= cols ? ++_i : --_i) {
        type = randomColor();
        if (allowMultipleColor !== true) {
          while (rowHasDifferentColors(guessColors, type) === false) {
            type = randomColor();
          }
        }
        guessColors[x] = type;
      }
      return null;
    };
    rowHasDifferentColors = function(row, type) {
      var counter, length, y, _i;
      if (row) {
        length = row.length;
        if (length < cols) {
          counter = length;
        } else {
          counter = cols;
        }
        for (y = _i = 0; 0 <= counter ? _i < counter : _i > counter; y = 0 <= counter ? ++_i : --_i) {
          if (row[y] === type) {
            return false;
          }
        }
      }
      return true;
    };
    randomColor = function() {
      var rand;
      rand = Math.floor(Math.random() * availableColoursCount);
      return rand;
    };
    createBoard = function() {
      var board, x, y, _i, _j;
      board = [];
      for (y = _i = 0; 0 <= rows ? _i < rows : _i > rows; y = 0 <= rows ? ++_i : --_i) {
        board[y] = [];
        for (x = _j = 0; 0 <= cols ? _j < cols : _j > cols; x = 0 <= cols ? ++_j : --_j) {
          board[y][x] = -1;
        }
      }
      colors = board;
      return null;
    };
    print = function() {
      var str, x, _i;
      str = "";
      for (x = _i = 0; 0 <= cols ? _i < cols : _i > cols; x = 0 <= cols ? ++_i : --_i) {
        str += guessColors[x];
        str += "\r\n";
      }
      console.log(str);
      return null;
    };
    checkGuessedColors = function(rowNumber) {
      var rightColor, rightPosition, x, y, z, _i, _j, _k;
      rightColor = 0;
      rightPosition = 0;
      for (x = _i = 0; 0 <= cols ? _i < cols : _i > cols; x = 0 <= cols ? ++_i : --_i) {
        if (colors[rowNumber][x] === -1) {
          return {
            rightPosition: -1,
            rightColor: -1,
            rowNumber: rowNumber
          };
        }
      }
      for (z = _j = 0; 0 <= cols ? _j < cols : _j > cols; z = 0 <= cols ? ++_j : --_j) {
        for (y = _k = 0; 0 <= cols ? _k < cols : _k > cols; y = 0 <= cols ? ++_k : --_k) {
          if (colors[rowNumber][z] === guessColors[y]) {
            if (z === y) {
              rightPosition++;
            } else {
              rightColor++;
            }
          }
        }
      }
      currentRow--;
      return {
        rightPosition: rightPosition,
        rightColor: rightColor,
        rowNumber: rowNumber
      };
    };
    checkColors = function() {
      return checkGuessedColors(currentRow);
    };
    getSolution = function() {
      var copy, x, _i;
      copy = [];
      for (x = _i = 0; 0 <= cols ? _i < cols : _i > cols; x = 0 <= cols ? ++_i : --_i) {
        copy[x] = guessColors[x];
      }
      return copy;
    };
    nextColor = function(x, y) {
      return changeColor(x, y, 1);
    };
    previousColor = function(x, y) {
      return changeColor(x, y, -1);
    };
    changeColor = function(x, y, dColor) {
      var color, currentColor, nColor, _nextColor;
      if (x === cols) {
        return -1;
      }
      if (y !== currentRow) {
        return -2;
      }
      currentColor = colors[y][x];
      nColor = currentColor + dColor;
      if (nColor < -1) {
        colors[y][x] = -1;
        return -1;
      }
      if (nColor >= availableColoursCount) {
        colors[y][x] = -1;
        return colors[y][x];
      }
      if (nColor < 0) {
        colors[y][x] = availableColoursCount(-1);
        return colors[y][x];
      }
      if (allowMultipleColor !== true) {
        _nextColor = currentColor;
        while (rowHasDifferentColors(colors[y], _nextColor) !== true) {
          _nextColor++;
          if (_nextColor >= availableColoursCount) {
            colors[y][x] = -1;
            return colors[y][x];
          }
        }
      }
      colors[y][x] = _nextColor;
      color = colors[y][x];
      return color;
    };
    getColor = function(x, y) {
      var color;
      color = colors[y][x];
      return color;
    };
    return {
      init: init,
      print: print,
      getSolution: getSolution,
      nextColor: nextColor,
      previousColor: previousColor,
      checkColors: checkColors,
      reset: reset,
      getColor: getColor
    };
  })();

}).call(this);

//# sourceMappingURL=board.js.map
