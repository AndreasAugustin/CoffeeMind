// Generated by CoffeeScript 1.8.0
(function() {
  var App;

  App = typeof exports !== "undefined" && exports !== null ? exports : window;

  App.coffeeMind = App.coffeeMind || {};


  /**
   * The board namespace
   *
   * @method App.game
   * @param {jQuery} $
   * @return {Object} API functions.
   */

  App.coffeeMind.input = (function() {
    var bind, handleClick, init, inputHandlers, keys, trigger, _$, _options;
    _options = {};
    _$ = {};
    inputHandlers = {};
    keys = {
      13: "KEY_ENTER",
      27: "KEY_ESCAPE",
      32: "KEY_SPACE",
      37: "KEY_LEFT",
      38: "KEY_UP",
      39: "KEY_RIGHT",
      40: "KEY_DOWN"
    };

    /*
     * @method init
     * @param {Object} options
     */
    init = function($) {
      var $board;
      _options = App.settings;
      _$ = $;
      $board = _$("#game-screen .game-board");
      $board.bind("mousedown", function(event) {
        handleClick(event, "CLICK", event);
        return null;
      });
      $board.bind("touchstart", function(event) {
        handleClick(event, "TOUCH", event.targetTouches[0]);
        return null;
      });
      _$(document).bind("keydown", function(event) {
        var keyName;
        keyName = keys[event.keyCode];
        if (keyName && _options.controls[keyName]) {
          event.preventDefault();
          trigger(_options.controls[keyName]);
        }
        return null;
      });
      return null;
    };

    /*
     * @method handleClick
     * @param {Event} event the event
     * @param {String} control the control
     * @param {Event} click the click
     */
    handleClick = function(event, control, click) {
      var action, board, imageSize, mastermindX, mastermindY, rect, relX, relY;
      action = _options.controls[control];
      imageSize = _options.imageSize;
      if (!action) {
        return null;
      }
      board = _$("#game-screen .game-board")[0];
      rect = board.getBoundingClientRect();
      relX = click.clientX - rect.left;
      relY = click.clientY - rect.top;
      mastermindX = Math.floor(relX / (rect.width - imageSize) * _options.cols);
      mastermindY = Math.floor(relY / rect.height * _options.rows);
      trigger(action, mastermindX, mastermindY);
      event.preventDefault();
      return null;
    };

    /*
     * @method bind
     * @param {String} action
     * @param {method} handler
     */
    bind = function(action, handler) {
      if (!inputHandlers[action]) {
        inputHandlers[action] = [];
      }
      inputHandlers[action].push(handler);
      return null;
    };

    /*
     * @method trigger
     * @param {String} action
     */
    trigger = function(action) {
      var args, handlers, i, len, _i;
      handlers = inputHandlers[action];
      args = Array.prototype.slice.call(arguments, 1);
      if (handlers) {
        len = handlers.length;
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          handlers[i].apply(null, args);
        }
      }
      return null;
    };
    return {
      init: init,
      bind: bind
    };
  })();

}).call(this);

//# sourceMappingURL=input.js.map
